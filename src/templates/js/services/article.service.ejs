/*
    Service for working only with the database
    and article object
*/

import Article from '../models/article.model.js';

// Class responsible for interacting with the article collection in the database
class ArticleService {
    // Method for creating a new article in the database
    async createArticle(data) {
<% if(database && databaseType === 'MongoDB') { -%>
        const article = new Article(data);
        return await article.save();
<% } -%>
<% if(database && databaseType === 'PostgreSQL') { -%>
        const article = Article.build(data);
        return await article.save();
<% } -%>
<% if(!database) { -%>
        const article = new Article(data.title, data.body);
        return article;
<% } -%>
    }

    // Method for finding all articles in the database
    async findArticles() {
<% if(database && databaseType === 'MongoDB') { -%>
        return await Article.find();
<% } -%>
<% if(database && databaseType === 'PostgreSQL') { -%>
        return await Article.findAll();
<% } -%>
<% if(!database) { -%>
        return new Article('Awesome article', 'This is an awesome article');
<% } -%>
    }

    // Method for finding an article by its ID in the database
    async findArticleByID(id) {
<% if(database && databaseType === 'MongoDB') { -%>
        return await Article.findById(id);
<% } -%>
<% if(database && databaseType === 'PostgreSQL') { -%>
        return await Article.findByPk(id);
<% } -%>
<% if(!database) { -%>
        return new Article('Awesome article', 'This is an awesome article');;
<% } -%>
    }

    // Method for updating an article by its ID in the database
    async updateArticleByID(id, data) {
<% if(database && databaseType === 'MongoDB') { -%>
        return await Article.findByIdAndUpdate(id, data, { new: true });
<% } -%>
<% if(database && databaseType === 'PostgreSQL') { -%>
        const article = await Article.findByPk(id);
        return await article.update(data);
<% } -%>
<% if(!database) { -%>
        const article = new Article(`${data.title} NEW`, `${data.body} NEW`);
        return article;
<% } -%>
    }

    // Method for deleting an article by its ID from the database
    async deleteArticleByID(id) {
<% if(database && databaseType === 'MongoDB') { -%>
        return await Article.findByIdAndDelete(id);
<% } -%>
<% if(database && databaseType === 'PostgreSQL') { -%>
        const article = await Article.findByPk(id);
        await article.destroy();
        return article;
<% } -%>
<% if(!database) { -%>
        const article = new Article('Awesome article', 'This is an awesome article');
        return article;
<% } -%>
    }
}

// Export an instance of the article service for use in other modules
export default new ArticleService();
